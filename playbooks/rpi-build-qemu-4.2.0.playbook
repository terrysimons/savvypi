---
- name: Install Raspberry Pi Optimized {{ package_name }}
  hosts: rpi-nodes
  remote_user: pi
  become_method: sudo
  become_user: root

  vars:
    cc: clang
    cxx: clang++
    nproc: 4
    package_name: QEMU
    package: qemu
    package_major_version: 4
    package_minor_version: 2
    package_patch_version: 0
    package_version: "{{ package_major_version }}.{{ package_minor_version }}.{{ package_patch_version }}"
    package_tarball_url: https://download.qemu.org/{{ package }}-{{ package_version }}.tar.bz2
    package_build_root: ${HOME}
    package_build_dir: "{{ package_build_root }}/{{ package }}-{{ package_version }}"
    package_build_options: --enable-hax --enable-hvf --enable-tcg-interpreter --enable-jemalloc --enable-plugins
    package_build_targets: --target-list=arm-softmmu,aarch64-softmmu,i386-softmmu
    package_install_prefix: /usr/local

  tasks:

  # Can we do an unless here, in case we're running with other playbooks?
  - name: Update Packages
    become: true
    apt:
      update_cache: yes
      upgrade: yes
      autoclean: yes
      autoremove: yes
      install_recommends: yes
      state: latest

  - name: Prepare {{ package_name }} {{ package_version }} Build Environment
    become: true
    apt:
      pkg:
        - build-essential
        - clang
        - coreutils
        - curl
        - libaio-dev
        - libbluetooth-dev
        - libbz2-dev
        - libcap-dev
        - libcap-ng-dev
        - libcurl4-gnutls-dev
        - libibverbs-dev
        - libfdt-dev
        - libglib2.0-dev
        - libgtk2.0-dev
        - libgtk-3-dev	
        - libgtkgl2.0-dev
        - "libgtkglext*-dev"
        - libiscsi-dev
        - libjpeg8-dev
        - liblzo2-dev
        - libncurses5-dev
        - libnfs-dev
        - libnuma-dev
        - libpixman-1-dev
        - librbd-dev
        - librdmacm-dev
        - libsasl2-dev
        - "*libsdl2*"
        - libseccomp-dev
        - libsnappy-dev
        - libssh2-1-dev
        - libvde-dev
        - libvdeplug-dev
        - libxen-dev
        - "libxt-*"	
        - lldb
        - git
        - git-email
        - python
        - python3
        - qt5-default
        - strace
        - sudo
        - sysfsutils
        - unzip
        - valgrind
        - wget
        - xfslibs-dev
        - zlib1g-dev
      state: latest
    register: eeprom_result

  - name: Configure OpenGL/Vulkan Support
    become: true
    apt:
      pkg:
        - "*epoxy*"
        - "libosmesa*"
        - "lib*gl*mesa*"
        - "libgbm*"
        - "libvulkan1"
        - "mesa-utils"
        - "mesa-utils-extra"
        - "mesa-vulkan-drivers"
        - "vulkan-utils"

  - name: Install {{ package_name }} Base
    become: true
    apt:
      pkg:
        - aqemu
        - binutils-dev
        - "libqcow*"
        - "libvirt*"
        - "libvirgl*"
        - qemu-guest-agent
        - "qemu-system-*"
        - qemu-user
        - sparse
        - libglib2.0-dev
        - libfdt-dev
        - libpixman-1-dev
        - zlib1g-dev
        - git-email
        - libaio-dev
        - libbluetooth-dev
        - libbrlapi-dev
        - libbz2-dev
        - libcap-dev
        - libcap-ng-dev
        - libcurl4-gnutls-dev
        - libgtk-3-dev
        - libibverbs-dev
        - libjpeg8-dev
        - libncurses5-dev
        - libnuma-dev
        - librbd-dev
        - librdmacm-dev
        - libsasl2-dev
        - libseccomp-dev
        - libsnappy-dev
        - libssh2-1-dev
        - libvde-dev
        - libvdeplug-dev
        - libxen-dev
        #- libzo2-dev
        - valgrind
        - xfslibs-dev
        - libnfs-dev
        - libiscsi-dev

# when ansible_distribution != Raspberry Pi
#        - grub-firmware-qemu

    # For building new QEMU:
    # --enable-rdma
    # https://community.mellanox.com/s/article/howto-enable--verify-and-troubleshoot-rdma#jive_content_id_For_Ubuntu_Installation
  #- name: Install QEMU --enable-rdma packages
  #  become: true
  #  apt:
  #    pkg:
  #     - rdma*
  #     - infiniband-diags
  #     - "libibumad*"
  #     - ibverbs-utils
  #     - tgt
  #     - targetcli-fb
  #     - "istgt"
  #     - open-iscsi
  #     - "libiscsi*"

# when ansible_distrubtion != Raspberry Pi
#        - ibutils

  # --enable-membarrier
  - name: Install {{ package_name }} --enable-membarrier packages
    become: true
    apt:
      pkg:
        - "liburcu*"

  # --enable-spice
  - name: Install {{ package_name }} --enable-spice packages
    become: true
    apt:
      pkg:
        - "spice-*"
        - "libspice-*"

  # --enable-smartcard
  - name: Install {{ package_name }} --enable-smartcard packages
    become: true
    apt:
      pkg:
        - "libcacard*"

  # --enable-libusb
  - name: Install {{ package_name }} --enable-libusb
    become: true
    apt:
      pkg:
        - "libusb*"


  # --enable-gluster
  - name: Install {{ package_name }} --enable-gluster
    become: true
    apt:
      pkg:
        - "glusterfs*"
        - "libgfap*"
        - "libgfchange*"
        - "libgfrpc*"
        - "libgfxdr*"
        - "libgluster*"
        - "nfs-*gluster"
        - "uwsgi*gluster*"

  # --enable-libxml2
  - name: Install {{ package_name }} --enable-libxml2
    become: true
    apt:
      pkg:
        - "libxml2*"


  # --enable-jemalloc
  - name: Install {{ package_name }} --enable-jemalloc
    become: true
    apt:
      pkg:
        - "libjemalloc*"

  # --enable-libpmem
  - name: Install {{ package_name }} --enable-libpmem
    become: true
    apt:
      pkg:
        - "libpmem*"

  # Other
  - name: Install {{ package_name }} Leftovers
    become: true
    apt:
      pkg:
        - libcrypt2
        - libgcrypt20*
        - libvirt-clients
        - libvirt-daemon
        - "libvte-2.91*"
        - nmap
        - ncat

  - name: "{{ package_name }} cross-container dependencies."
    become: true
    apt:
      pkg:
        - "docker.io*"

  - name: Add Pi user to docker group.
    become: true
    shell:
      cmd: usermod -aG docker pi 

  #- name: Install Docker
  #  become: true
  #  shell:
  #    cmd: curl -sSL https://get.docker.com | sh

  - name: Download {{ package_name }} {{ package_version }} ({{ package_tarball_url }})
    unarchive:
      src: "{{ package_tarball_url }}"
      remote_src: yes
      creates: "{{  package_build_dir }}"
      dest: "{{ package_build_root }}"

# Note:
# - name: install system updates for centos systems
#   yum:
#     name: *
#     state: latest
#     update_cache: yes
#   when: ansible_distribution == "CentOS"
#
# - name: install system updates for ubuntu systems
#   apt:
#     upgrade: dist
#     update_cache: yes
#   when: ansible_distribution == "Ubuntu"

  # This also works, but I like the above better.
  #
  # - name: Create {{ package_name }} {{ package_version }} .
  #   file:
  #     path: "{{  package_build_dir }}"
  #     state: directory
  #
  # - name: Download {{ package_name }} {{ package_version }}
  #   become: true
  #   get_url:
  #     dest: /tmp/qemu-{{ package_version }}.tar.bz2
  #     url: "{{  package }}_tarball_url }}"

#  - name: Configure {{ package_name }} {{ package_version }}
#    command: ./configure --prefix="{{ package_install_prefix }}" --cc="{{ cc }}" --cxx="{{ cxx }}" "{{  package }}_build_options }}"
#       chdir: "{{  package_build_dir }}"
      # creates: TODO

# This also works, but I like the above better.
#
  - name: Configure {{ package_name }} "{{ package_version }}"
    shell:
      chdir: "{{  package_build_dir }}"
      cmd: ./configure --prefix={{ package_install_prefix }} --cc={{ cc }} --cxx={{ cxx }} {{ package_build_options }} {{  package_build_targets }}

  - name: Make {{ package_name }} {{ package_version }}
    make:
      chdir: "{{ package_build_dir }}"
      params:
        j: "$(nproc)"

  - name: Install {{ package_name }} {{ package_version }} to {{ package_install_prefix }}
    become: yes
    make:
      chdir: "{{ package_build_dir }}"
      target: install

#- name: Build 'all' target with extra arguments
#  make:
#    chdir: /home/ubuntu/cool-project
#    target: all
#    params:
#      NUM_THREADS: 4
#      BACKEND: lapack